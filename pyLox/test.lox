true;  // Not false.
false; // Not *not* false.

1234;  // An integer.
12.34; // A decimal number.

"I am a string";
"";    // The empty string.
"123"; // This is a string, not a number.

nil;

1 + 2;
3 - 4;
5 * 6;
7 / 8;

-9;

1 < 2;
3 <= 4;
5 > 6;
7 >= 8;

1 == 2;         // false.
"cat" != "dog"; // true.

314 == "pi"; // false.

123 == "123"; // false.

!true;  // false.
!false; // true.

true and false; // false.
true and true;  // true.

false or false; // false.
true or false;  // true.

var average = (1 + 10) / 2;

{
  print "One statement.";
  print "Two statements.";
}

var imAVariable = "here is my value";
var iAmNil;

var breakfast = "bagels";
print breakfast; // "bagels".
breakfast = "beignets";
print breakfast; // "beignets".

var condition = breakfast == "bagels";
if (condition) {
  print "yes";
} else {
  print "no";
}

var a = 1;
while (a < 10) {
  print a;
  a = a + 1;
}

for (var a = 1; a < 10; a = a + 1) {
  print a;
}

fun average(a, b) {	// override var average
  return (a + b) / 2;
}
printf("average of %f and %f is %f\n", 1, 10, average(1, 10));

fun counter(i) {
	fun count() {
		i = i + 1;
		return i
	}
	return count;
}

var cnt1 = counter(0);
var cnt2 = counter(10);
for (var i = 0; i < 5; i = i + 1) {
	printf("%d, %d\n", cnt1(), cnt2());
}

fun count(n) {
  if (n > 1) count(n - 1);
  print n;
}
count(3);

print lambda(a, b) { a + b } (5, 7);

class Breakfast {
  init(meat, bread) {
    this.meat = meat;
    this.bread = bread;
  }
  cook() {
    print "Eggs a-fryin'!";
  }
  serve(who) {
    print "Enjoy your " + this.meat + " and " +
        this.bread + ", " + who + ".";
  }

}

var baconAndToast = Breakfast("bacon", "toast");
baconAndToast.serve("Dear Reader");
// "Enjoy your bacon and toast, Dear Reader."

class Brunch < Breakfast {
  init(meat, bread, drink) {
    super.init(meat, bread);
    this.drink = drink;
  }
  askDrink() {
    print "How about a Blood Mary?";
  }
}

var benedict = Brunch("ham", "toast", "English muffin");
benedict.serve("Noble Reader");
benedict.cook();
benedict.askDrink();

// test super
class A {
  method() { print "A method"; }
  class_method() { print "A class method"; }
}
class B < A {
  method() { print "B method"; }
  class_method() { print "B class method"; }
  test() { super.method(); }
  test_class_method() { super.class_method(); }
}
class C < B {}

C().test();	// "A method"
C.test_class_method(); // "A class method"
